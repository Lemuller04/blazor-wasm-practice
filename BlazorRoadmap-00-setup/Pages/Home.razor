@page "/"
@inject ITimeService Clock
@inject IWeatherService Weather
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<h3 class="brand">Página Inicial</h3>
<div class="hero">
    <p>Bem-vindo ao projeto</p>
</div>

<p>Thats Hornet from Hollow Knight: Silk Song</p>

<img src="img/hornet.webp" alt="Hornet from Silk Song" />

<hr>
<h3>Demo Contador</h3>
<Contador InitialValue="10" OnChange="HandleChange" />

@code {
    int lastValue;
    void HandleChange(int v) => lastValue = v;
}

<p>Último valor recebido: @lastValue</p>
<hr>

<hr>
<h3>Demo Rating</h3>
<Rating @bind-Value="nota" />
<p>Nota escolhida: @nota</p>

@code {
    int nota = 3;
}
<hr>

<hr>
<h3>Toggle Demo</h3>
<Toggle @bind-Value="ativo" />

<p>Status: @(ativo ? "Ativo" : "Inativo")</p>

@code {
    bool ativo = false;
}
<hr>

<hr>
<h3>Card Demo</h3>

<Card Title="Usuário">
    <ChildContent>Nome: Ana</ChildContent>
    <Footer>
        <button class="btn btn-sm btn-secondary">Fechar</button>
    </Footer>
</Card>
<hr>

<hr>
<h3>List Demo</h3>
<ListTemplate Items="@(new[] { "Maçã", "Banana", "Pera" })">
    <RowTemplate Context="it">
        <span><b>@it</b></span>
    </RowTemplate>
</ListTemplate>
<hr>

<hr>
<h3>Table Template demo</h3>

<TableTemplate Items="@pessoas">
    <Header>
        <th>Nome</th>
        <th>Idade</th>
    </Header>
    <RowTemplate Context="p">
        <td>@p.Nome</td>
        <td>@p.Idade</td>
    </RowTemplate>
</TableTemplate>

@code {
    record Pessoa(string Nome, int Idade);
    List<Pessoa> pessoas = new()
    {
        new("Ana", 25),
        new("Carlos", 30),
        new("Maria", 22)
    };
}
<hr>

<hr>
<h3>Modal Demo</h3>
<button class="btn btn-primary" @onclick="() => showModal = true">Abrir Modal</button>

<Modal Title="Confirmação" @bind-Show="showModal">
    <ChildContent>
        <p>Deseja realmente continuar?</p>
    </ChildContent>
    <Footer>
        <button class="btn btn-secondary" @onclick="() => showModal = false">Cancel</button>
        <button class="btn btn-danger" @onclick="Confirm">Confirm</button>
    </Footer>
</Modal>

@code {
    private bool showModal = false;

    void Confirm()
    {
        showModal = false;
        Console.WriteLine("Action confirmed!");
    }
}
<hr>

<hr>
<h3>Clientes</h3>

<ul>
    <li><a href="cliente/1">Cliente 1</a></li>
    <li><a href="cliente/2">Cliente 2</a></li>
</ul>
<hr>

<hr>
<h3>Time Service Demo</h3>
<p>Agora: @Clock.Now()</p>
<hr>

<hr>
<h3>Weather Service Demo</h3>
<table class="table">
    <thead>
        <tr>
            <th>Data</th>
            <th>Temp. (C)</th>
            <th>Resumo</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var f in Weather.GetForecasts())
        {
            <tr>
                <td>@f.Date.ToShortDateString()</td>
                <td>@f.TemperatureC</td>
                <td>@f.Summary</td>
            </tr>
        }
    </tbody>
</table>
<hr>

<hr>
<h3>Layout com Grid</h3>

<div class="grid-layout">
    <div>Coluna 1: Menu</div>
    <div>Coluna 2: Conteúdo principal</div>
</div>
<hr>

<hr>
<h3>Tags</h3>
<Tag Text="Blazor" />
<Tag Text="CSS" />
<Tag Text="WebAssembly" />
<hr>

<hr>
<input id="nome" class="form-control" placeholder="Seu nome" />
<button class="btn btn-secondary" @onclick="Alertar">Alertar</button>
<button class="btn btn-outline-primary" @onclick="Focar">Focar input</button>

<p>@viewportInfo</p>

@code {
    string viewportInfo = "";

    async Task Alertar() =>
        await JS.InvokeVoidAsync("site.alert", "Olá do JS!");

    async Task Focar() =>
        await JS.InvokeVoidAsync("site.focusById", "nome");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var vp = await JS.InvokeAsync<Viewport>("site.viewport");
            viewportInfo = $"Viewport: {vp.w}x{vp.h}";
            StateHasChanged();
        }
    }

    record Viewport(int w, int h);
}

<p>@scrollInfo</p>
<button class="btn btn-info" @onclick="AtualizarScroll">Atualizar Scroll</button>

@code {
    string scrollInfo = "";

    async Task AtualizarScroll()
    {
        var pos = await JS.InvokeAsync<Scroll>("site.scrollPosition");
        scrollInfo = $"Scroll: {pos.x}px / {pos.y}px";
    }

    record Scroll(int x, int y);
}
<hr>

<hr>
<input @bind="textoCopiar" class="form-control" placeholder="Texto para copiar" />
<button class="btn btn-success" @onclick="CopiarTexto">Copiar</button>

@code {
    string textoCopiar = "";

    async Task CopiarTexto() =>
        await JS.InvokeVoidAsync("site.copyToClipboard", textoCopiar);
}

<hr>
